type: edu
files:
- name: build.gradle
  visible: true
  text: |-
    plugins {
        id 'java'
        id 'org.springframework.boot' version '2.3.1.RELEASE'
        id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    }

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation group: 'org.hibernate', name: 'hibernate-validator', version: '6.1.0.Final'
    }
  learner_created: false
- name: src/account/AccountServiceApplication.java
  visible: true
  text: |-
    package account;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class AccountServiceApplication {

        public static void main(String[] args) {
            SpringApplication.run(AccountServiceApplication.class, args);
        }

    }
  learner_created: false
- name: src/account/model/records/response/RecordResponseSignup.java
  visible: true
  text: |-
    package account.model.records.response;

    public record RecordResponseSignup (long id,
                                        String name,
                                        String lastname,
                                        String email) {
    }
  learner_created: true
- name: src/account/service/AuthService.java
  visible: true
  text: |
    package account.service;

    import account.dao.UserDao;
    import account.model.User;
    import account.model.records.request.RecordRequestChangePass;
    import account.model.records.request.RecordRequestSignup;
    import account.model.records.response.RecordResponseChangePass;
    import account.model.records.response.RecordResponseSignup;
    import lombok.extern.slf4j.Slf4j;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.security.crypto.password.PasswordEncoder;
    import org.springframework.stereotype.Service;
    import org.springframework.validation.BeanPropertyBindingResult;
    import org.springframework.web.reactive.function.server.ServerRequest;
    import org.springframework.web.reactive.function.server.ServerResponse;
    import org.springframework.web.server.ServerWebInputException;
    import reactor.core.publisher.Mono;
    import org.springframework.validation.Validator;
    import reactor.util.function.Tuple2;
    import java.security.Principal;
    import static account.security.PassConfig.*;
    import static org.springframework.web.reactive.function.server.ServerResponse.ok;

    @Service
    @Slf4j
    public class AuthService {

        private final Validator validator;
        private final UserDao dao;
        private final PasswordEncoder encoder;

        @Autowired
        public AuthService(Validator validator,
                                     UserDao dao,
                                     PasswordEncoder encoder) {
            this.validator = validator;
            this.dao = dao;
            this.encoder = encoder;
        }

        public Mono<ServerResponse> signup(ServerRequest req) {
            return req
                    .bodyToMono(
                                RecordRequestSignup.class)
                    .flatMap(r -> ok()
                                         .body(validateAndSave(r),
                                                 RecordResponseSignup.class));
        }

        public Mono<ServerResponse> changePassword(ServerRequest req) {
            return req
                    .bodyToMono(RecordRequestChangePass.class)
                    .zipWith(req.principal())
                    .flatMap(tuple -> ok().body(validateAndChangepass(tuple),
                            RecordResponseChangePass.class));
        }


        private Mono<RecordResponseChangePass> validateAndChangepass(Tuple2<RecordRequestChangePass, ?
                                                               extends Principal> tuple) {

            final var newPassword = tuple.getT1().newPassword();
            var passwordValidationError = validatePassword(newPassword);
            if (!passwordValidationError.isEmpty()) {
                return Mono.error(
                             new ServerWebInputException(
                                     passwordValidationError));
            }
            return dao
                    .findByEmail(tuple.getT2().getName())
                    .ofType(User.class)
                    .flatMap(user -> {
                        if (encoder.matches(newPassword,
                                            user.getPassword())) {

                            return Mono.error(
                                    new ServerWebInputException(
                                            SAME_PASSWORD_ERRORMSG));
                        } else {
                            user.setPassword(
                                             encoder.encode(newPassword));

                            return dao.save(user)
                                    .map(u -> new RecordResponseChangePass(
                                            u.getEmail(),
                                            PASSWORD_UPDATEMSG));
                        }});
        }


        private Mono<RecordResponseSignup> validateAndSave(RecordRequestSignup record) {
            var errors = new BeanPropertyBindingResult(record,
                                                       RecordRequestSignup.class.getName());
            validator.validate(record, errors);
            if (errors.hasErrors()) {
                return Mono.error(
                        new ServerWebInputException(errors
                                                       .getAllErrors()
                                                       .toString()));
            }
            var passwordValidationError = validatePassword(record.password());

            if (!passwordValidationError.isEmpty()) {
                return Mono.error(
                        new ServerWebInputException(
                                passwordValidationError));
            }
            return saveUser(record);
        }


        private String validatePassword(String password) {
            if (password == null ||
                    password.length() < MIN_PASSWORD_LENGTH) {
                return PASSWORD_TOO_SHORT_ERRORMSG;
            }
            if (passwordIsHacked(password)) {
                return PASSWORD_HACKED_ERRORMSG;
            }
            return "";
        }

        private Mono<RecordResponseSignup> saveUser(RecordRequestSignup record) {
            return dao
                    .findByEmail(record.email())
                    .defaultIfEmpty(User.unknown())
                    .ofType(User.class)
                    .flatMap(user -> {
                        if (user.isUnknown()) {
                            return dao
                                    .save(User
                                            .fromSignupRequest(record,
                                                               encoder
                                                                       .encode(record.password())))
                                    .map(User::toSignupResponse);
                        } else {
                            return Mono.error(
                                    new ServerWebInputException(USER_EXISTS_ERRORMSG));
                        }});
        }
    }
  learner_created: true
- name: src/account/service/AccountService.java
  visible: true
  text: |-
    package account.service;


    import account.dao.SalaryDao;
    import account.dao.UserDao;
    import account.model.Salary;
    import account.model.User;
    import account.model.records.request.RecordRequestSalary;
    import account.model.records.response.RecordResponseSalary;
    import account.model.records.response.RecordResponseStatus;
    import lombok.AllArgsConstructor;
    import lombok.extern.slf4j.Slf4j;
    import org.springframework.context.support.DefaultMessageSourceResolvable;
    import org.springframework.core.ParameterizedTypeReference;
    import org.springframework.data.domain.Sort;
    import org.springframework.stereotype.Service;
    import org.springframework.transaction.annotation.Transactional;
    import org.springframework.validation.BeanPropertyBindingResult;
    import org.springframework.validation.Validator;
    import org.springframework.web.reactive.function.server.ServerRequest;
    import org.springframework.web.reactive.function.server.ServerResponse;
    import org.springframework.web.server.ServerWebInputException;
    import reactor.core.publisher.Mono;
    import reactor.util.function.Tuple2;

    import java.util.List;
    import java.util.Optional;
    import java.util.stream.Collectors;

    import static account.security.ErrorMSG.*;
    import static java.lang.Boolean.FALSE;
    import static java.lang.Boolean.TRUE;
    import static java.util.function.Predicate.not;
    import static org.springframework.data.domain.Sort.Direction.ASC;
    import static org.springframework.web.reactive.function.server.ServerResponse.ok;


    @Service
    @Slf4j
    @AllArgsConstructor
    public class AccountService {

        private final UserDao daoU;
        private final SalaryDao daoS;
        private final Validator validator;

        public Mono<ServerResponse> accessPayrolls(ServerRequest request) {

            Optional<String> searchPeriod = request.queryParam("period");

            if (searchPeriod.isPresent() &&
                    !searchPeriod
                            .get()
                            .matches("(0[1-9]|1[0-2])-[1-9]\\d{3}")) {
                return Mono.error(
                        new ServerWebInputException(
                                "Wrong Date: Use mm-yyyy format!"));
            }
            return request
                    .principal()
                    .flatMap(principal -> ok()
                                              .body(selectSalaries(principal.getName(),
                                                                 searchPeriod),
                            new ParameterizedTypeReference<>(){}));
        }

        private Mono<List<RecordResponseSalary>> selectSalaries(String email,
                                                                Optional<String> searchPeriod) {
            return daoU
                    .findByEmail(email)
                    .ofType(User.class)
                    .flatMap(user -> searchPeriod.isEmpty()
                            ?
                            daoS.findAllByEmail(email,
                                               Sort.by(ASC, "period"))
                            .map(salary -> RecordResponseSalary
                                                              .fromUserAndSalary(salary, user))
                            .collectList()
                            :
                            daoS
                            .findByEmployeeAndPeriod(email, Salary.yearFirst(searchPeriod.get()))
                            .map(salary -> List.of(
                                           RecordResponseSalary.fromUserAndSalary(salary, user))));
        }

        public Mono<ServerResponse> changePayrolls(ServerRequest request) {
            return request
                    .bodyToMono(RecordRequestSalary.class)
                    .flatMap(rec -> ok().body(validateAndUpdate(rec),
                                              RecordResponseStatus.class));
        }

        private Mono<RecordResponseStatus> validateAndUpdate(RecordRequestSalary record) {
            var hibernateValidationErrors = validateHibernate(record);
            if (!hibernateValidationErrors.isEmpty()) {
                return Mono.error(
                        new ServerWebInputException(hibernateValidationErrors));
            }
            return daoS
                    .findByEmployeeAndPeriod(record.employee(),
                                             Salary.yearFirst(record.period()))
                    .defaultIfEmpty(Salary.empty())
                    .flatMap(salary -> salary.isEmpty()
                            ?
                            Mono.error(new ServerWebInputException(NO_SUCH_SALES_RECORD_ERRORMSG))
                            :
                            daoS
                                    .save(salary
                                            .setMonthlySalary(record.salary()))
                                    .map(saved -> new RecordResponseStatus(UPDATED_SUCCESSFULLY)));
        }

        @Transactional
        public Mono<ServerResponse> uploadPayrolls(ServerRequest req) {
            return req
                    .bodyToFlux(RecordRequestSalary.class)
                    .index()
                    .flatMap(this::validateAll)
                    .collectList()
                    .flatMap(list -> ok().body(
                                            saveSalaryRecord(list),
                                            RecordResponseStatus.class));
        }

        private Mono<Tuple2<RecordRequestSalary, String>> validateAll(Tuple2<Long,
                                                                      RecordRequestSalary> tuple) {

            var hibernateValidationErrors = validateHibernate(tuple.getT2());
            Mono<String> err = Mono.just(hibernateValidationErrors.isEmpty()
                    ?
                    ""
                    :
                    RECORDMSG_START.formatted(tuple.getT1(),
                                              hibernateValidationErrors));
            if (hibernateValidationErrors.isEmpty()) {
                err = validateWithDatabase(tuple.getT1(), tuple.getT2());
            }
            return Mono.just(tuple.getT2()).zipWith(err);
        }

        private String validateHibernate(RecordRequestSalary record) {
            var errors = new BeanPropertyBindingResult(record,
                                                      RecordRequestSalary.class.getName());
            validator.validate(record, errors);
            return errors.hasErrors()
                    ?
                    errors
                            .getAllErrors()
                            .stream()
                            .map(DefaultMessageSourceResolvable::getDefaultMessage)
                            .collect(Collectors.joining(" && "))
                    :
                    "";
        }

        private Mono<String> validateWithDatabase(long recordId,
                                                  RecordRequestSalary record) {
            return daoU
                    .findByEmail(record.employee())
                    .hasElement()
                    .flatMap(hasUserElement -> {

                        if (FALSE.equals(hasUserElement)) {
                            return Mono.just(RECORDMSG_START
                                                             .formatted(recordId,
                                                                        NO_SUCH_EMPLOYEE_ERRORMSG));
                        } else {
                            return daoS
                                    .findByEmployeeAndPeriod(record.employee(),
                                            Salary.yearFirst(record.period()))
                                    .hasElement()
                                    .map(hasSalaryElement -> TRUE.equals(hasSalaryElement)
                                            ?
                                            RECORDMSG_START.formatted(recordId,
                                                                      RECORD_ALREADY_EXISTS_ERRORMSG)
                                            :
                                            "");
                        }});
        }


        private Mono<RecordResponseStatus> saveSalaryRecord(List<Tuple2<RecordRequestSalary,
                                                            String>> tuples) {
            if (tuples
                    .stream()
                    .anyMatch(not(
                                   tuple -> tuple
                                               .getT2()
                                               .isEmpty()))) {
                var joinedErrorMessage = tuples
                                                      .stream()
                                                      .map(Tuple2::getT2)
                                                      .filter(not(String::isEmpty))
                                                      .collect(Collectors.joining(" | "));
                return Mono.error(
                        new ServerWebInputException(joinedErrorMessage));
            }
            if (tuples.stream()
                    .map(Tuple2::getT1)
                    .collect(Collectors
                                      .groupingBy(rec -> rec
                                                          .employee()
                                                          .toLowerCase()
                                                         + rec.period()))
                    .values()
                    .stream()
                    .map(List::size)
                    .anyMatch(s -> s > 1)) {

                return Mono.error(
                        new ServerWebInputException(
                                DUPLICATE_RECORDS_ERRORMSG));
            }
            return daoS
                       .saveAll(tuples
                                   .stream()
                                   .map(Tuple2::getT1)
                                   .map(Salary::fromSalaryRecord)
                                   .toList())
                       .count()
                       .map(count -> new RecordResponseStatus(
                               "%d records %s".formatted(count,
                                              ADDED_SUCCESSFULLY)));
        }
    }
  learner_created: true
- name: src/account/model/User.java
  visible: true
  text: |
    package account.model;

    import account.model.records.request.RecordRequestSignup;
    import account.model.records.response.RecordResponseSignup;
    import lombok.AllArgsConstructor;
    import lombok.Builder;
    import lombok.Data;
    import lombok.NoArgsConstructor;
    import org.springframework.data.annotation.Id;
    import org.springframework.data.annotation.Transient;
    import org.springframework.data.relational.core.mapping.Table;
    import org.springframework.security.core.GrantedAuthority;
    import org.springframework.security.core.authority.AuthorityUtils;
    import org.springframework.security.core.userdetails.UserDetails;
    import java.util.ArrayList;
    import java.util.Collection;
    import java.util.List;


    @Data
    @Builder
    @NoArgsConstructor
    @AllArgsConstructor
    @Table("users")
    public class User implements UserDetails {
        private static final User UNKNOWN =
                User
                        .builder()
                        .id(-1)
                        .build();

        @Id
        private long id;
        private String name;
        private String lastname;
        private String email;
        private String password;

        @Builder.Default()
        @Transient
        private List<String> roles = new ArrayList<>();

        public static User fromSignupRequest(RecordRequestSignup record,
                                             String encryptPass) {
            return User
                       .builder()
                       .name(record.name())
                       .lastname(record.lastname())
                        .email(record.email())
                       .password(encryptPass)
                       .build();
        }

        @Override
        public Collection<? extends GrantedAuthority> getAuthorities() {
            return AuthorityUtils
                    .createAuthorityList(roles.toArray(new String[0]));
        }

        @Override
        public String getUsername() {
            return email;
        }

        @Override
        public boolean isAccountNonExpired() {
            return true;
        }

        @Override
        public boolean isAccountNonLocked() {
            return true;
        }

        @Override
        public boolean isCredentialsNonExpired() {
            return true;
        }

        @Override
        public boolean isEnabled() {
            return true;
        }

        public RecordResponseSignup toSignupResponse() {
            return new RecordResponseSignup(id, name, lastname, email);
        }

        public static User unknown() {
            return UNKNOWN;
        }

        public boolean isUnknown() {
            return id == -1;
        }
    }
  learner_created: true
- name: src/account/service/AdminService.java
  visible: true
  text: |
    package account.service;

    import org.springframework.stereotype.Service;

    @Service
    public class AdminService {
    }
  learner_created: true
- name: src/account/dao/SalaryDao.java
  visible: true
  text: |
    package account.dao;

    import account.model.Salary;
    import org.springframework.data.domain.Sort;
    import org.springframework.data.r2dbc.repository.Query;
    import org.springframework.data.repository.reactive.ReactiveSortingRepository;
    import org.springframework.stereotype.Repository;
    import reactor.core.publisher.Flux;
    import reactor.core.publisher.Mono;


    @Repository
    public interface SalaryDao extends ReactiveSortingRepository<Salary, Long> {

        @Query("SELECT * FROM SALARY WHERE EMAIL = $1 AND PERIOD = $2")
        Mono<Salary> findByEmployeeAndPeriod(String email, String period);

        Flux<Salary> findAllByEmail(String email, Sort sort);
    }
  learner_created: true
- name: src/account/model/records/request/RecordRequestChangePass.java
  visible: true
  text: |-
    package account.model.records.request;

    import com.fasterxml.jackson.annotation.JsonProperty;
    import javax.validation.constraints.NotEmpty;

    public record RecordRequestChangePass(@NotEmpty
                                          @JsonProperty("new_password")
                                          String newPassword) {
    }
  learner_created: true
- name: src/account/dao/UserDao.java
  visible: true
  text: |
    package account.dao;

    import account.model.User;
    import org.springframework.context.annotation.ComponentScan;
    import org.springframework.data.repository.reactive.ReactiveCrudRepository;
    import org.springframework.security.core.userdetails.UserDetails;
    import org.springframework.stereotype.Repository;
    import reactor.core.publisher.Mono;

    @Repository
    @ComponentScan
    public interface UserDao extends ReactiveCrudRepository<User, Long> {
        Mono<UserDetails> findByEmail(String email);
    }
  learner_created: true
- name: src/account/model/records/response/RecordResponseStatus.java
  visible: true
  text: |-
    package account.model.records.response;

    public record RecordResponseStatus(String status) {
    }
  learner_created: true
- name: src/account/model/records/request/RecordRequestSignup.java
  visible: true
  text: |
    package account.model.records.request;

    import javax.validation.constraints.NotEmpty;
    import javax.validation.constraints.NotNull;
    import javax.validation.constraints.Pattern;

    public record RecordRequestSignup(@NotEmpty String name, @NotEmpty String lastname,
    @NotNull @Pattern(regexp ="(?i)\\w+(\\.\\w+){0,2}@acme.com") String email,
    @NotEmpty String password) {
    }
  learner_created: true
- name: src/account/model/records/response/RecordResponseChangePass.java
  visible: true
  text: |-
    package account.model.records.response;

    public record RecordResponseChangePass(String email,
                                           String status) {
    }
  learner_created: true
- name: src/account/model/records/response/RecordResponseSalary.java
  visible: true
  text: |-
    package account.model.records.response;

    import account.model.Salary;
    import account.model.User;
    import java.time.Month;
    import java.time.format.TextStyle;
    import java.util.Locale;


    public record RecordResponseSalary(String name,
                                 String lastname,
                                 String period,
                                 String salary) {

        public static RecordResponseSalary fromUserAndSalary(Salary salary, User user) {

            return new RecordResponseSalary(
                    user.getName(),
                    user.getLastname(),
                    monthFirst(salary.getPeriod()),
                    getSalaryText(salary.getMonthlySalary()));
        }

        private static String getSalaryText(long salary) {
            return "%d dollar(s) %02d cent(s)"
                    .formatted(salary / 100, salary % 100);
        }

        private static String monthFirst(String period) {
            return Month
                    .of(Integer.parseInt(period.substring(5)))
                    .getDisplayName(TextStyle.FULL, Locale.US)
                    +
                    "-"
                    +
                    period.substring(0, 4);
        }
    }
  learner_created: true
- name: src/account/model/records/request/RecordRequestSalary.java
  visible: true
  text: |
    package account.model.records.request;

    import javax.validation.constraints.Min;
    import javax.validation.constraints.NotEmpty;
    import javax.validation.constraints.Pattern;

    public record RecordRequestSalary(
    @NotEmpty
    @Pattern(regexp ="(?i)\\w+(\\.\\w+){0,2}@acme.com",
             message = "Not a valid corporate Email")
             String employee,

    @NotEmpty
    @Pattern(regexp = "(0[1-9]|1[0-2])-[1-9]\\d{3}",
            message = "Wrong date!")
            String period,

    @Min(value = 0,
            message = "Salary must be non negative!")
         long salary) {
    }
  learner_created: true
- name: src/account/model/records/response/RecordResponseUserDeleted.java
  visible: true
  learner_created: true
- name: src/account/model/records/request/RecordRequestRole.java
  visible: true
  learner_created: true
- name: src/account/dao/RoleDao.java
  visible: true
  learner_created: true
- name: src/account/model/Role.java
  visible: true
  learner_created: true
- name: src/account/dao/UserRoleDao.java
  visible: true
  learner_created: true
- name: src/account/security/messages/AccountMessages.java
  visible: true
  learner_created: true
- name: src/account/security/messages/AuthMessages.java
  visible: true
  text: |
    package account.security;

    import lombok.NoArgsConstructor;

    import java.util.Set;

    @NoArgsConstructor
    public class PassConfig {

        public static final int BCRYPT_STRENGTH = 13;

        public static final int MIN_PASSWORD_LENGTH = 12;

        public static final String USER_EXISTS_ERRORMSG = "User exist!";

        public static final String PASSWORD_TOO_SHORT_ERRORMSG =
                "The password length must be at least "
                + MIN_PASSWORD_LENGTH + " chars!";

        public static final String PASSWORD_HACKED_ERRORMSG =
                "The password is in the hacker's database!";

        public static final String SAME_PASSWORD_ERRORMSG =
                "The passwords must be different!";

        public static final String PASSWORD_UPDATEMSG =
                "The password has been updated successfully";

        public static boolean passwordIsHacked(String password) {
            return breachedPasswords.contains(password);
        }

        private static final Set<String> breachedPasswords = Set.of(
                "PasswordForJanuary",
                "PasswordForFebruary",
                "PasswordForMarch",
                "PasswordForApril",
                "PasswordForMay",
                "PasswordForJune",
                "PasswordForJuly",
                "PasswordForAugust",
                "PasswordForSeptember",
                "PasswordForOctober",
                "PasswordForNovember",
                "PasswordForDecember");
    }
  learner_created: true
- name: src/account/model/Salary.java
  visible: true
  text: |-
    package account.model;

    import account.model.records.request.RecordRequestSalary;
    import lombok.AllArgsConstructor;
    import lombok.Builder;
    import lombok.Data;
    import lombok.NoArgsConstructor;
    import lombok.experimental.Accessors;
    import org.springframework.data.annotation.Id;
    import org.springframework.data.relational.core.mapping.Column;
    import org.springframework.data.relational.core.mapping.Table;

    @Data
    @Builder
    @Accessors(chain = true)
    @NoArgsConstructor
    @AllArgsConstructor
    @Table("salary")
    public class Salary {
        private static final Salary EMPTY = new Salary();

        @Id
        private long id;

        private String email;

        private String period;

        @Column("salary")
        private long monthlySalary;

        public static Salary fromSalaryRecord(RecordRequestSalary record) {
            return Salary
                         .builder()
                         .email(record.employee())
                         .monthlySalary(record.salary())
                         .period(yearFirst(record.period()))
                         .build();
        }

        public static String yearFirst(String period) {
            return period.substring(3) +
                    "-" +
                    period.substring(0,2);
        }

        public static Salary empty() {
            return EMPTY;
        }

        public boolean isEmpty() {
            return this == EMPTY;
        }
    }
  learner_created: true
- name: src/account/model/UserRole.java
  visible: true
  learner_created: true
- name: src/resources/table.sql
  visible: true
  learner_created: true
- name: src/account/security/messages/AdminMessages.java
  visible: true
  learner_created: true
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
    spring.jackson.serialization.INDENT_OUTPUT=true
  learner_created: false
- name: src/resources/roles.sql
  visible: true
  learner_created: true
- name: src/account/security/RouterConfigurer.java
  visible: true
  text: |
    package account.security;

    import account.service.AccountService;
    import account.service.AdminService;
    import account.service.AuthService;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.context.annotation.Bean;
    import org.springframework.context.annotation.Configuration;
    import org.springframework.web.reactive.function.server.RouterFunction;
    import org.springframework.web.reactive.function.server.ServerResponse;
    import static org.springframework.web.reactive.function.server.RouterFunctions.route;


    @Configuration
    public class RouterConfigurer {

        @Bean
        @Autowired
        public RouterFunction<ServerResponse> routes(AuthService auth,
                                                     AccountService account,
                                                     AdminService admin) {
            return route()
                    .add(authenticationRoutes(auth))
                    .add(accountRoutes(account))
                    .build();
        }

        private RouterFunction<ServerResponse> authenticationRoutes(AuthService auth) {
            return route()
                    .POST("/api/auth/signup", auth::signup)
                    .POST("/api/auth/changepass", auth::changePassword)
                    .build();
        }

        private RouterFunction<ServerResponse> adminRoutes(AdminService admin) {
            return route().build();
        }

        private RouterFunction<ServerResponse> accountRoutes(AccountService account) {
            return route()
                    .GET("/api/empl/payment", account::accessPayrolls)
                    .POST("/api/acct/payments", account::uploadPayrolls)
                    .PUT("/api/acct/payments", account::changePayrolls)
                    .build();
        }
    }
  learner_created: true
- name: src/account/security/WebSecurity.java
  visible: true
  text: |-
    package account.security;


    import account.dao.UserDao;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.context.annotation.Bean;
    import org.springframework.http.HttpMethod;
    import org.springframework.http.HttpStatus;
    import org.springframework.security.authentication.ReactiveAuthenticationManager;
    import org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity;
    import org.springframework.security.config.web.server.ServerHttpSecurity;
    import org.springframework.security.core.userdetails.ReactiveUserDetailsService;
    import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
    import org.springframework.security.crypto.password.PasswordEncoder;
    import org.springframework.security.web.server.SecurityWebFilterChain;
    import org.springframework.web.server.ResponseStatusException;
    import reactor.core.publisher.Mono;

    import static account.security.PassConfig.BCRYPT_STRENGTH;


    @EnableWebFluxSecurity
    public class SecurityConfiguration {

        @Bean
        @Autowired
        public SecurityWebFilterChain springSecurityFilterChain(ServerHttpSecurity http,
                                                                ReactiveAuthenticationManager manager) {
            http
                    .csrf()
                    .disable()
                    .httpBasic(httpB ->
                               httpB.authenticationEntryPoint((exchange, ex) ->
                                               Mono.error(new ResponseStatusException(HttpStatus.UNAUTHORIZED,
                                                                   ex.getMessage())))
                                       .authenticationManager(manager))
                    .authorizeExchange()
                    .pathMatchers("/api/auth/signup",
                                             "/api/acct/payments")
                    .permitAll()
                    .pathMatchers(HttpMethod.GET,
                            "/actuator",
                                       "/actuator/**")
                    .permitAll()
                    .pathMatchers("/api/**").authenticated()
                    .and()
                    .formLogin();
            return http.build();
        }

        @Bean
        @Autowired
        public ReactiveUserDetailsService userDetailsService(UserDao dao) {
            return dao::findByEmail;
        }

        @Bean
        public PasswordEncoder getEncoder() {
            return new BCryptPasswordEncoder(BCRYPT_STRENGTH);
        }
    }
  learner_created: true
- name: src/account/security/AuthManager.java
  visible: true
  text: |
    package account.security;

    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.security.authentication.BadCredentialsException;
    import org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager;
    import org.springframework.security.core.Authentication;
    import org.springframework.security.core.userdetails.ReactiveUserDetailsService;
    import org.springframework.security.crypto.password.PasswordEncoder;
    import org.springframework.stereotype.Component;
    import reactor.core.publisher.Mono;
    import static account.security.PassConfig.PASSWORD_HACKED_ERRORMSG;
    import static account.security.PassConfig.passwordIsHacked;

    @Component
    public class ReactiveManager extends UserDetailsRepositoryReactiveAuthenticationManager {

        @Autowired
        public ReactiveManager(ReactiveUserDetailsService service,
                               PasswordEncoder encoder) {
            super(service);
            setPasswordEncoder(encoder);
        }

        @Override
        public Mono<Authentication> authenticate(Authentication authentication) {
            if (passwordIsHacked((String) authentication.getCredentials())) {
                return Mono.error(
                        new BadCredentialsException(
                                PASSWORD_HACKED_ERRORMSG + " Please change!"));
            }
            return super.authenticate(authentication);
        }
    }
  learner_created: true
- name: test/resource/application.properties
  visible: true
  learner_created: true
- name: test/resource/data/account_template.mv.db
  visible: true
  learner_created: true
- name: test/AccountServiceTest.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/16605#comment
status: Solved
feedback:
  message: Congratulations!
  time: Mon, 19 Sep 2022 20:06:56 UTC
record: -1
